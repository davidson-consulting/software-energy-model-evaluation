#+TITLE:   Micro sequential vs parallel
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t _:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+HTML_HEAD_EXTRA:<style> #content { max-width: 10000px; }  ul, ol, li, a {margin: 0;} </style>


* Description

** Goal

Experimentations launching stress-ng applications to evaluate PowerAPI and Scaphandre models

** Folders
- scripts: contains deployment and analysis scripts 
- small-intel: results for experiments run on small-intel
- small-amd: results for experiments run on small-amd

** Usage
*** Run the experiments
All scripts are run directly on the target server
**** PowerAPI
You need to copy the following files on the target server:
- config-formula.json
- config-sensor.json
- docker-compose.yaml
- powerapi.py

Then you need to make sure that your system is configured to support CgroupV1
(see: "https://powerapi.org/reference/cgroup/cgroup_v1_activation/") and that
the following cgroups are present on the system: pg, pg1, pg2. You can do it
through the following commands:
- sudo cgcreate -g "perf_event:pg"
- sudo cgcreate -g "perf_event:pg1"
- sudo cgcreate -g "perf_event:pg2"

Those are needed to run PowerAPI and the experimentation script.

You can then run `python3 powerapi.py`

Note: depending on your system, you may need to ajust the number of operations
to run for each stress to have long-enough run time (e.g 1 minute). There is a
dictionnary to modify in the script called "pg".

**** Scaphandre
You will need to copy the following file on the target server:
- scaphandre.py

  You need to make sure your system uses CgroupV2.

  You can then run `python3 scaphandre.py --time-factor 6 all` to run all
  stress. As with powerapi, you can modify a dictionnary to modify the number of
  operations for each stress. The "time-factor" flag let you multiply the number
  of operations to run by a given factor.

*** Analyse results
There is several scripts to generate output:
- plot_powerapi.py PATH NB_CORES: generate different analysis for the
  experiments on NB_CORES (1, 2, 3) for powerapi on a results given path (ex
  `../small-amd/powerapi/results`). You can comment / uncomment different lines
  at the end of the main function to print what you need (the content of the
  tikz used for the scatter plot, display the actual plot, print the avg
  distance to the ideal ratio, ...)
- plot_scaphandre.py PATH NB_CORES: generate different analysis for the
  experiments on NB_CORES (1, 2, 3) for scaphandre on a results given path (ex
  `../small-amd/scaphandre/results`). You can comment / uncomment different lines
  at the end of the main function to print what you need (the content of the
  tikz used for the scatter plot, display the actual plot, print the avg
  distance to the ideal ratio, ...)
- powerapi_variability.py PATH NB_CORES: generate tikz for boxplot presented in
  the paper for the experiments on NB_CORES (1, 2, 3) for powerapi on a results
  given path (ex `../small-amd/powerapi/results`)
- scaphandre_variability.py PATH NB_CORES: generate tikz for boxplot presented
  in the paper for the experiments on NB_CORES (1, 2, 3) for scaphandre on a
  results given path (ex `../small-amd/scaphandre/results`)

  For the powerapi analysis script, sometimes you can get a not file found
  error. Sometimes, the PowerAPI formula give different name to the output (ex:
  "sensor" or "cpu"). You can modify the script (ex: change "sensor-" to "cpu-"
  and vice versa in the main function)
