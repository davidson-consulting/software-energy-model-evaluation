#+TITLE:   Micro sequential vs parallel
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  fr
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t _:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+HTML_HEAD_EXTRA:<style> #content { max-width: 10000px; }  ul, ol, li, a {margin: 0;} </style>


* Description

** Goal

Experimentations launching stress-ng applications to evaluate PowerAPI and Scaphandre models

** Folders
- scripts: contains deployment and analysis scripts 
- micro_no_HT: results for experiments run without hyperthreading nor turboboost
- micro_with_HT: results for experiments run with HT and turboboost

** Usage
*** Run the experiments
All scripts are run directly on the target server

**** PowerAPI

You need to copy the following files on the target server:
- utils/powerapi/*
- utils/*
- scripts/run.py

Then you need to make sure that your system is configured to support CgroupV1
(see: "https://powerapi.org/reference/cgroup/cgroup_v1_activation/").

Run the following scripts:
- utils/configure.sh
- utils/powerapi/configure.sh

Those are needed to run PowerAPI and the experimentation script.

Then change the script "scripts/run.py" to select the comparisons to launch
You can then run `python3 run.py`

Results are located in "./results"

**** Scaphandre
You will need to copy the following file on the target server:
- utils/*

  You need to make sure your system uses CgroupV2.

Run the following script:
- utils/configure.sh

Then change the script "scripts/run.py" to select the comparisons to launch
You can then run `python3 run.py`

Results are located in "./results"

*** Analyse results

The script "script/analyse.py" is used to analyse the results.
It contains multiple functions to analyse different results :

- Consumption curve
  This scripts need the result "empty", and applications executed alone ranging from 1 to N threads
#+BEGIN_SRC
# plot the consumption curve from the result of the big intel node without HT
custom.analyseAlone ("big-intel", False)

# plot the consumption curve from the result of the ptero node with HT
custom.analyseAlone ("ptero", True)


# Plot rapl power consumption of a specific run
custom.plotSingleTraceFiles ("micro_no_HT/big-intel/result/queens-4/energy.csv")
custom.plotSingleTracesFile ("micro_no_HT/big-intel/result/queens-v-float64-4_4/energy.csv")
#+END_SRC

- Analyse scaphandre

#+BEGIN_SRC
# Analyse the result of powerapi on ptero without hyperthreading
scaphandre.analyseScapandre ("ptero", False)

# Analyse the result of powerapi on where PG1 is capped but not PG2
# We need to have a ref value of PG2 to get its alone consumption
# ptero-capped/result/ackermann-1 containing the alone result of ackermann but capped to 50%
scaphandre.analyseScapandre ("ptero-capped", False, "ptero")
#+END_SRC

- Analyse powerapi

#+BEGIN_SRC
# Analyse the result of powerapi on ptero without hyperthreading
powerapi.analysePowerAPI ("ptero", False)

# Analyse the result of powerapi on ptero where PG1 is capped but not PG2
# We need to have a ref value of PG2 to get its alone consumption
# ptero-capped/result/ackermann-1 containing the alone result of ackermann but capped to 50%
powerapi.analysePowerAPI ("ptero-capped", False, "ptero")

# Plot the traces of powerapi on big-intel, int64 16 threads vs matrixprod 16 threads
powerapi.plotSingleTraces ("big-intel", False, "int64", 16, "matrixprod", 16)
#+END_SRC
